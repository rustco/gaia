"use strict";(self.webpackChunkcosmos_hub_docs_site=self.webpackChunkcosmos_hub_docs_site||[]).push([[7826],{5680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>m});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(a),g=r,m=c["".concat(l,".").concat(g)]||c[g]||h[g]||o;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},372:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(8168),r=(a(6540),a(5680));const o={title:"Joining Testnet",order:3},i=void 0,s={unversionedId:"hub-tutorials/join-testnet",id:"hub-tutorials/join-testnet",title:"Joining Testnet",description:"Visit the testnets repo for the most up-to-date information on the currently available public testnets:",source:"@site/docs/hub-tutorials/join-testnet.md",sourceDirName:"hub-tutorials",slug:"/hub-tutorials/join-testnet",permalink:"/main/hub-tutorials/join-testnet",draft:!1,tags:[],version:"current",frontMatter:{title:"Joining Testnet",order:3},sidebar:"tutorialSidebar",previous:{title:"Joining Mainnet",permalink:"/main/hub-tutorials/join-mainnet"},next:{title:"Upgrading the Chain",permalink:"/main/hub-tutorials/live-upgrade-tutorial"}},l={},p=[{value:"How to Join",id:"how-to-join",level:2},{value:"Create a Validator (Optional)",id:"create-a-validator-optional",level:2},{value:"Upgrading Your Node",id:"upgrading-your-node",level:2},{value:"Cosmovisor Upgrade Example",id:"cosmovisor-upgrade-example",level:3}],u={toc:p},c="wrapper";function h(e){let{components:t,...a}=e;return(0,r.yg)(c,(0,n.A)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Visit the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/cosmos/testnets"},"testnets repo")," for the most up-to-date information on the currently available public testnets:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Interchain Security (ICS) Testnet: ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/cosmos/testnets/blob/master/interchain-security/provider/README.md"},(0,r.yg)("inlineCode",{parentName:"a"},"provider"))),(0,r.yg)("li",{parentName:"ul"},"Release Testnet: ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/cosmos/testnets/blob/master/release/README.md"},(0,r.yg)("inlineCode",{parentName:"a"},"theta-testnet-001")))),(0,r.yg)("h2",{id:"how-to-join"},"How to Join"),(0,r.yg)("p",null,"You can set up a testnet node with a single command using one of the options below:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Run a shell script from the testnets repo",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/cosmos/testnets/tree/master/interchain-security/provider#bash-script"},"ICS Testnet")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/cosmos/testnets/blob/master/release/README.md#bash-script"},"Release testnet")))),(0,r.yg)("li",{parentName:"ul"},"Run an Ansible playbook from the ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/hyphacoop/cosmos-ansible"},"cosmos-ansible")," repo",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/hyphacoop/cosmos-ansible/blob/main/examples/README.md#provider-chain"},"ICS Testnet")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/hyphacoop/cosmos-ansible/blob/main/examples/README.md#join-the-cosmos-hub-release-testnet"},"Release Testnet"))))),(0,r.yg)("h2",{id:"create-a-validator-optional"},"Create a Validator (Optional)"),(0,r.yg)("p",null,"If you want to create a validator in either testnet, request tokens through the ",(0,r.yg)("a",{parentName:"p",href:"https://discord.com/channels/669268347736686612/953697793476821092"},"faucet Discord channel")," and follow the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/cosmos/testnets/blob/master/interchain-security/VALIDATOR_JOINING_GUIDE.md#creating-a-validator-on-the-provider-chain"},"this guide"),". If you are creating a validator in the Release Testnet, you can disregard the instructions about joining live consumer chains."),(0,r.yg)("h2",{id:"upgrading-your-node"},"Upgrading Your Node"),(0,r.yg)("p",null,"Follow these instructions if you have a node that is already synced and wish to participate in a scheduled testnet software upgrade."),(0,r.yg)("p",null,"When the chain reaches the upgrade block height specified by a software upgrade proposal, the chain binary will halt and expect the new binary to be run (the system log will show ",(0,r.yg)("inlineCode",{parentName:"p"},'ERR UPGRADE "<Upgrade name>" NEEDED at height: XXXX')," or something similar)."),(0,r.yg)("p",null,"There are three ways you can update the binary:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Without Cosmovisor: You must build or download the new binary ahead of the upgrade. When the chain binary halts at the upgrade height:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Stop the gaiad service with ",(0,r.yg)("inlineCode",{parentName:"li"},"systemctl stop gaiad.service"),"."),(0,r.yg)("li",{parentName:"ul"},"Build or download the new binary, replacing the existing ",(0,r.yg)("inlineCode",{parentName:"li"},"~/go/bin")," one."),(0,r.yg)("li",{parentName:"ul"},"Start the gaiad service with ",(0,r.yg)("inlineCode",{parentName:"li"},"systemctl start gaiad.service"),".")),(0,r.yg)("ol",{start:2},(0,r.yg)("li",{parentName:"ol"},"With Cosmovisor: You must build or download the new binary and copy it to the appropriate folder ahead of the upgrade."),(0,r.yg)("li",{parentName:"ol"},"With Cosmovisor: Using the auto-download feature, assuming the proposal includes the binaries for your system architecture.")),(0,r.yg)("p",null,"The instructions below are for option 2. For more information on auto-download with Cosmovisor, see the relevant ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/tree/main/tools/cosmovisor#auto-download"},"documentation")," in the Cosmos SDK repo."),(0,r.yg)("p",null,"If the environment variable ",(0,r.yg)("inlineCode",{parentName:"p"},"DAEMON_ALLOW_DOWNLOAD_BINARIES")," is set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),", Cosmovisor will look for the new binary in a folder that matches the name of the upgrade specified in the software upgrade proposal."),(0,r.yg)("h3",{id:"cosmovisor-upgrade-example"},"Cosmovisor Upgrade Example"),(0,r.yg)("p",null,"Using the ",(0,r.yg)("inlineCode",{parentName:"p"},"v17")," upgrade as an example, the expected folder structure would look as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},".gaia\n\u2514\u2500\u2500 cosmovisor\n    \u251c\u2500\u2500 current\n    \u251c\u2500\u2500 genesis\n    \u2502   \u2514\u2500\u2500 bin\n    |       \u2514\u2500\u2500 gaiad\n    \u2514\u2500\u2500 upgrades\n        \u2514\u2500\u2500 v17\n            \u2514\u2500\u2500 bin\n                \u2514\u2500\u2500 gaiad\n")),(0,r.yg)("p",null,"Prepare the upgrade directory"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"mkdir -p ~/.gaia/cosmovisor/upgrades/v17/bin\n")),(0,r.yg)("p",null,"Download and install the new binary version."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"cd $HOME/gaia\ngit pull\ngit checkout v17.0.0-rc0\nmake install\n\n# Copy the new binary to the v17 upgrade directory\ncp ~/go/bin/gaiad ~/.gaia/cosmovisor/upgrades/v17/bin/gaiad\n")),(0,r.yg)("p",null,"When the upgrade height is reached, Cosmovisor will stop the gaiad binary, update the symlink from ",(0,r.yg)("inlineCode",{parentName:"p"},"current")," to the relevant upgrade folder, and restart. After a few minutes, the node should start syncing blocks using the new binary."))}h.isMDXComponent=!0}}]);